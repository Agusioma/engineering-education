# # Plagiarism checker
#
# This job:
#
# - Is manually kicked off by EngEd administrator by adding 'plagiarism check' label to PR (to save on review limits in Unicheck plan)
# - Converts index.md file to .pdf
# - Calls out to the [Unicheck] API
#   - Get access token
#   - Upload article .pdf
#   - Start similarity check
#   - Wait 2 minutes
#   - Similarity check report export
# - Displays plagiarism report as comment in PR
#
# This job requires several secrets to successfully run. Examples:
#
# | Secret name       | Description                                                                       | Example                                                 |
# |-------------------|-----------------------------------------------------------------------------------|---------------------------------------------------------|
# | ACCESS_TOKEN      | Personal access token with permissions: repo, read:packages, write:packages, +SSO | 1b6c637ac9b58abe8be795077bc13145                        |
# | WEBSITE_REPO      | Git repository for the full Section website, to build the articles inside         | https://github.com/section/example-website-repo         | 
# | UNICHECK API KEY  | Client key                                                                        | xxxxxxxxxxxxxxxxxx                                    |
# | UNICHECK API SECRET | Unicheck secret key                                                             | xxxxxxxxxxxxxxxxxxxxx                                   | 

name: Plagiarism checker
# Need to figure out how to manually trigger this workflow. (The idea of the below is to trigger when a particular label is added to the PR.)
on:
  pull_request:
    types: [ labeled ]

jobs:
  convert_md:
    name: Convert markdown to pdf
    runs-on: ubuntu-latest
    steps:
      # This checks out the latest version of the code to get a copy of all .md files. We need to figure out how to only get the index.md file within the PR that triggered this action.
    - name: Checkout Code
      uses: actions/checkout@v2.0.0
      with:
        fetch-depth: 1
    - name: Create .pdfs
      uses: scottypate/md-to-pdf@v0.1.1
      env: {
        # Use this parameter to determine where the generated .pdf(s) will be stored.
        PDF_DIR: './pdfs'
      }
  
  plagiarismCheck:
    name: Check for plagiarism
    needs: [ convert_md ]
    runs-on: ubuntu-latest
    steps: 
    - name: Get access token
      id: access_token
      run: |
        curl -X POST \
        https://api.unicheck.com/oauth/access-token \
          -H 'Content-Type: application/x-www-form-urlencoded' \
          -d 'grant_type=client_credentials&client_id={{ UNICHECK API KEY }}&client_secret={{ UNICHECK API SECRET }}'
# Need to store access token provided in response for use in subsequent steps
    
    - name: Upload article
      id: upload_article
      run: |
        curl -X POST \
        "https://api.unicheck.com/files" \
        -H "Accept: application/vnd.api+json" \
        -H "Authorization: Bearer {{ access_token }}" \
        -H "Content-Type: multipart/form-data" -F "file=@{{ path-to-file.pdf }}"
# Need to store file_id provided in response for use in subsequent step

    - name: Start similarity check
      id: start_check
      run: |
        curl -X POST \
        "https://api.unicheck.com/similarity/checks" \
        -H "Accept: application/vnd.api+json" \
        -H "Authorization: Bearer {{ access_token }}" \
        -H "Content-Type: application/vnd.api+json" \
        -d "{ \"data\": { \"type\": \"similarityCheck\", \"attributes\": { \"search_types\": { \"web\":true, \"library\": false }, \"parameters\": { \"sensitivity\": { \"percentage\": 0, \"words_count\": 8 } } } }, \"relationships\": { \"file\": { \"data\": { \"id\": \"{{ file_id }}\", \"type\": \"file\" } } }}"
# Need to store similarity_check_id provided in response for use in subsequent steps
      
    - name: Delay 2 minutes
      uses: jakejarvis/wait-action@master
      with:
        time: '120s'

    - name: Get report
      id: get_report
      run: |
        curl -X POST \
        https://api.unicheck.com/similarity/checks/{{ similarity_check_id }}/report/export \
        -H 'Accept: application/vnd.api+json' \
        -H 'Authorization: Bearer {{ access_token }}' \
        -H 'Content-Type: application/vnd.api+json' \
        -d '{
          "data": {
          "type" :"similarity-check-report-export",
          "attributes":{
            "format" :"pdf",
            "locale_code" :"EN"
              }
            }
          }'
# Need to store id provided in response for use in next step

    - name: Output report
      id: output_report
      run: |
        curl -X GET \
        https://api.unicheck.com/similarity/checks/{{ similarity_check_id }}/report/export/{{ id }}
        --output ${{ id }}.pdf
# Attempting to store the outputed file for next step

  report:
    name: ðŸ“¸ Display report
    needs: [ convert_md, plagiarismCheck ]
    runs-on: ubuntu-latest
    steps:
# Reused/manipulated snippet from screenshot-new-articles action to upload the pdf as a comment to the PR
    - name: ðŸ—£ Post comment
      uses: actions/github-script@v2
      with:
        script: |
          args = {
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "Here's your plagiarism check report (/engineering-education/${{ matrix.article_slug }}/):\n\n![plagiarism-check](${{ steps.output_report.outputs.${{ id }}.pdf }})"
          }
          github.issues.createComment(args)
