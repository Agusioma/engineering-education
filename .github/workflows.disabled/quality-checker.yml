# # Plagiarism checker
#
# This job:
#
# - Detects if there are any new articles or updates to existing articles and grabs text from index.md file
# - Calls out to the [Unicheck] API
# - Compares content in article's index.md file with public domain
# - Displays plagiarism report as comment in PR
#
# Does this job require any secrets to successfully run? Examples:
#
# | Secret name       | Description                                                                       | Example                                                 |
# |-------------------|-----------------------------------------------------------------------------------|---------------------------------------------------------|
# | ACCESS_TOKEN      | Personal access token with permissions: repo, read:packages, write:packages, +SSO | 1b6c637ac9b58abe8be795077bc13145                        |
# | WEBSITE_REPO      | Git repository for the full Section website, to build the articles inside         | https://github.com/section/example-website-repo         |                                                |

name: Plagiarism checker

on:
  pull_request:
    types: [ opened, synchronize, reopened ]

jobs:
  preflight:
    name: ü§î Plagiarism check needed?
    runs-on: ubuntu-latest
    outputs:
      slug_matrix: ${{ steps.article_names.outputs.slug_matrix }}
    steps:
    - name: üõí Checkout repo
      uses: actions/checkout@v2

    - name: üîé Identify file changes
      id: file_changes
      uses: trilom/file-changes-action@v1.2.3
      with:
        prNumber: ${{ github.event.pull_request.number }}

    - name: üïµÔ∏è Any articles?
      id: any_articles
      run: |
        echo -n "::set-output name=count::"
        jq --slurp '.[0] + .[1] | unique | map(select(. | test("^articles\/"))) | length' ~/files_added.json ~/files_modified.json

    - name: üöß Stop if no article changes
      if: steps.any_articles.outputs.count == 0
      uses: andymckay/cancel-action@0.2

    - name: üïµÔ∏è Identify article names
      id: article_names
      run: |
        echo -n "::set-output name=slug_matrix::"
        jq --slurp --compact-output '.[0] + .[1] | unique | map(select(. | test("^articles\/"))) | unique | { include: . }' ~/files_added.json ~/files_modified.json

    - name: Grab text
      id: grab_text
      run: ?????
  
  plagiarismCheck:
    name: Check for plagiarism
    runs-on: ubuntu-latest
    needs: [ preflight ]
    steps: 
    - name: Schedule a check
      id: schedule_check
      run: "https://api.unicheck.com/similarity/checks"

    - name: Poll status and return results
      id: status_results
      run: "https://api.unicheck.com/similarity/checks/{similarity_check_id}"
      


  report:
    name: üì∏ Display report
    needs: [ preflight, plagiarismCheck ]
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJSON(needs.preflight.outputs.slug_matrix) }}
    services:
      website:
        image: registry.hub.docker.com/auxesis/section-gh-action-www.section.io:latest
        ports:
          - 1313:1313
    steps:


    - name: üó£ Post comment
      uses: actions/github-script@v2
      with:
        script: |
          args = {
            issue_number: context.payload.pull_request.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: "Here's a screenshot of the article (/engineering-education/${{ matrix.article_slug }}/):\n\n![screenshot](${{ steps.upload-screenshot.outputs.img_url }})"
          }
          github.issues.createComment(args)
